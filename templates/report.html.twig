{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <h1>Report</h1>

    <h2 id="kmom01">kmom01</h2>

    <h3>Berätta kort om dina förkunskaper och tidigare erfarenheter kring objektorientering.</h3>
        <p>Främst genom arbetet med objektorienting i oopython-kursen.</p>
    <h3>Berätta kort om PHPs modell för klasser och objekt. Vilka är de grunder man behöver veta/förstå för att kunna komma igång och skapa sina första klasser?</h3>
        <p>Klasser för att beskriva utformningen, med attribut och metoder. Objektinstanser som följer klassbeskrivningar. Jag skulle rekommendera denna artikel om man vill komma igång och bekanta sig med klasser och objekt i PHP: <a href="https://www.php.net/manual/en/language.oop5.basic.php">länk</a></p>
    <h3>Reflektera kort över den kodbas, koden, strukturen som användes till uppgiften me/report, hur uppfattar du den?</h3>
        <p>De ramverk som startats igång, i kurserna jag hittills läst, har jag uppfattat som "överdimensionerade" och med mycket extra "fluff". Detta i jämförelse med vad som ska presenteras i en kmom01-uppgift. Detta sammanhang är inget undantag. Några av respektive ramverks trevliga egenskaper att nyttja, brukar dock klarna över tid och efter användning/övning.</p>
    <h3>Med tanke på artikeln “PHP The Right Way”, vilka delar in den finner du extra intressanta och värdefulla? Är det några särskilda områden som du känner att du vill veta mer om? Lyft fram några delar av artikeln som du känner mer värdefulla.</h3>
        <p>Jag överblickade främst artikeln, och har inte läst den till den grad att jag är helt bekväm med att peka på delar jag skulle mena på vara mer värdefulla än andra. I och med att jag ombeds lyfta fram någon del av artikeln, kan jag något forcerat nämna att jag uppskattade uppgifterna/varningarna om bristande UTF-8 hantering i PHP som språk. Inklusive exempel som gavs på att vissa funktioner inte hanterar UTF-8 strängar på ett bra/korrekt sätt.</p>
    <h3>Vilken är din TIL för detta kmom?</h3>
        <p>Att ramverk, likt namnet antyder, troligtvis är besläktat med konceptet huvudvärk.</p>

    <hr>

        <h2 id="kmom02">kmom02</h2>

    <h3>Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och hur de används i PHP.</h3>
        <p>Arv gör det möjligt att introducera nya klasser med unika metoder/egenskaper, men som dessutom ärver egenskaper/funktionalitet från sin förälder</p>
        <p>Komposition förmedlar ett förhållande där en klass kan nyttja/inneha instanser av en annan klass, utan en arvsmässig koppling.</p>
        <p>Interface gör det möjligt att specificera vilka metoder och egenskaper som förväntas finnas hos en klass (som ska använda interface:t som specificerats), utan att behöva gå in i frågan om exakt implementering.</p>
        <p>Trait gör det möjligt att beskriva funktionalitet (likt metoder) för återanvändning inom flera olika klasser, utan att kräva en arvsrelation hos klasserna som ska ("åter-") använda denna funktionalitet.</p>
    <h3>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden och dina klasser?</h3>
        <p>Jag valde att följa upplägget från tärningsspelet i övningen, samt representera korttyperna med UTF-8 symboler. Korttyperna fick egenskapade namn. Dessa namn används i princip inte till annat än att "översätta" till UTF-8 symboler, och hade kunnat användas mer systematiskt. Övningsmässigt känns det helt OK, men utan att ha någon senare tillämpning av kortleken i åtanke, är det oklart för mig om det är en (nog) god implementation. Valet av JSON svar och dess namngivning är inte speciellt konsekvent, och det hade varit trevligt att tänka igenom dessa mer utifrån framtida tillämpningar. Jag är inte nöjd med att korttyperna listas både i klassen för ett enskilt kort samt i kortleksklassen. Det hade varit snyggare att ändra om, exempelvis så att kortleken hämtar uppgifter om vilka korttyper som är tillåtna (från den kortklass som har importerats och ska användas till spel/dragning) - och/eller  ett interface mellan kort och kortlek.
        </p>
    <h3>Vilka är dina reflektioner så här långt med att jobb i Symfony med applikationskod enligt MVC?</h3>
        <p>Det känns lite smidigare nu än i kmom01. Att i huvudsak kunna jobba mot objekt/klass metoder i router-funktionerna är rätt trevligt.</p>
    <h3>Vilken är din TIL för detta kmom?</h3>
        <p>Att det finns UTF-8 symboler för kortleks kort</p>

        {% endblock %}